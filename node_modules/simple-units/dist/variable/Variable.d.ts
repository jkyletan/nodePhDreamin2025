import Value from "./Value.js";
/**
 * A variable is a placeholder for prefixes, suffixes and similar and is only used in the context of the {@link FlexibleUnit}.
 * Under the hood it's similar to an array.
 * To get a better understanding of variables read the Flexible Unit's documentation first.
 *
 * @see FlexibleUnit
 */
export default class Variable {
    /**
     * @hidden
     */
    private _values;
    /**
     * @hidden
     */
    private _computedValues;
    /**
     * whether the variable is optional
     */
    isOptional: boolean;
    /**
     * @hidden
     */
    readonly _internal: {
        _computeValues: () => void;
        _toArray: () => Value[];
    };
    /**
     * Creates a new variable.
     * @param isOptional whether the variable should be optional
     * @param values the different values the variable can take
     */
    constructor(values: Value[], isOptional?: boolean);
    /**
     * Adds the values of another variable to this variable.
     * @param variable variable holding more values
     * @returns this
     */
    combine(variable: Variable): this;
    /**
     * Multiplies every value's ratio with the specified number.
     * @param n
     * @returns this
     */
    multiply(n: number): this;
    /**
     * Adds the specified number to every value's ratio.
     * @param n
     * @returns this
     */
    add(n: number): this;
    /**
     * Subtracts the specified number from every value's ratio.
     * @param n
     * @returns this
     */
    subtract(n: number): this;
    /**
     * Divides every value's ratio to the specified number.
     * @param n
     * @returns this
     */
    divide(n: number): this;
    /**
     * Takes every value's ratio to the specified power.
     * @param n the exponent
     * @returns this
     */
    pow(n: number): this;
    /**
     * Creates a deep copy of this variable.
     * @param isOptional whether the copy should be optional
     * @returns a deep copy of this variable
     */
    copy(isOptional?: boolean): Variable;
    /**
     * Creates a deep copy of this variable starting inclusively from the {@link Value} having the first argument
     * as `short` property and ending inclusively at the {@link Value} having the second
     * argument as `short` property.
     * @param startPoint
     * @param endPoint
     * @param isOptional whether the subcopy should be optional
     * @returns a subcopy of this variable
     */
    subcopy(startPoint: string, endPoint?: string, isOptional?: boolean): Variable;
    filteredCopy(selection: string[], isOptional?: boolean): Variable;
}
//# sourceMappingURL=Variable.d.ts.map