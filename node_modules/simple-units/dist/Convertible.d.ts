import { inspect } from "util";
import Unit from "./Unit.js";
export type FormatOptions = {
    length?: "long" | "short";
};
/**
 * A convertible combines a number with a unit.
 * It offers several methods to convert itself into
 * different units and therefore is the key concept behind converting
 * in _simple-units_.
 */
export default class Convertible {
    /**
     * The convertible's value. Changes through converting.
     */
    value: number;
    /**
     * The convertible's unit. Changes through converting.
     */
    get unit(): Unit;
    /**
     * These methods and properties are only used internally.
     * @hidden
     */
    _internal: {
        /**
         * The convertible's unit. Changes through converting.
         */
        _unit: null | Unit;
        /**
         * Converts the convertible to the passed unit without checking for compatibilty.
         * This method exists due to performance enhancement. Returns the conversion's result.
         * @param unit the target unit
         * @returns the conversion's result
         */
        _toUnitUnchecked: (unit: Unit) => number;
        /**
         * Converts the convertible to the passed unit without checking for compatibilty.
         * This method exists due to performance enhancement. Returns the convertible itself.
         * @param unit the target unit
         * @returns the convertible itself
         */
        _asUnitUnchecked: (unit: Unit) => this;
    };
    /**
     * Creates a convertible with the passed value and unit.
     * It is not recommended to create a convertible this way. Instead
     * use the collection's `.from(value: number, unit: string)` or `.Convertible(value: number, unit: string)` method.
     *
     * **Recommended way to create a convertible**:
     * @example
     * ```
     * import units from "simple-units.js";
     *
     * const convertible = units.Convertible(12, "m");
     * console.log(convertible.value); // Output: 12
     * console.log(convertible.unit.toString()); // Output: m
     * ```
     *
     * @param value the convertible's value
     * @param unit the convertible's unit
     */
    constructor(value: number, unit: Unit);
    /**
     * Returns an array of units to which the convertible can be converted.
     *
     * @example
     * ```typescript
     * const convertible = units.Convertible(12, "kt");
     *
     * for(const unit of convertible.possibilities()){
     *    console.log(unit); // Output: Ym/a, Zm/a, Em/a, Pm/a, ...
     * }
     * ```
     *
     * @returns an array of units to which the convertible can be converted
     */
    possibilities(): string[];
    /**
     * Converts the convertible to the passed unit and returns the conversion's result.
     *
     * @example
     * ```
     * const convertible = units.Convertible(12, "°C");
     *
     * console.log(convertible.to("K"));
     * // Output: 261.15
     *
     * console.log(convertible.value);
     * // Output: 261.15
     *
     * console.log(convertible.unit.toString());
     * // Output: K
     * ```
     *
     * @param unit the target unit
     * @returns the conversion's result
     */
    to(unit: string | Unit): number;
    /**
     * Converts the convertible to the passed unit and returns the convertible itself.
     *
     * @example
     * ```
     * const convertible = units.from(12, "°C").as("K");
     *
     * console.log(convertible.value);
     * // Output: 261.15
     *
     * console.log(convertible.unit.toString());
     * // Output: K
     * ```
     * @param unit the target unit
     * @returns the convertible itself
     */
    as(unit: string | Unit): this;
    /**
     * Converts the convertible to the best possible unit. In this case the best means having as few digits
     * as possible before the decimal point. Returns the convertible itself.
     *
     * @example
     * ```
     * const convertible = units.Convertible(1000, "m").asBest();
     *
     * console.log(convertible.value);
     * // Output: 1
     *
     * console.log(convertible.unit.toString());
     * // Output: km
     * ```
     *
     * By default the convertible remains in the same unit system. If `false` is passed, this behaviour is disabled.
     * @param remainInUnitSystem whether to remain in the same unit system (default is `true`)
     * @returns the convertible itself
     */
    asBest(remainInUnitSystem?: boolean): this;
    /**
     * Returns the convertible as short string.
     *
     * @example
     * ```
     * const convertible = units.Convertible(1000, "meter");
     *
     * console.log(convertible.toString());
     * // Output: 1000m
     *
     * console.log(convertible);
     * // Output: 1000m (but in blue :D)
     * ```
     *
     * @returns
     */
    toString(): string;
    /**
     * @hidden
     */
    [inspect.custom](depth: any, options: any): any;
    /**
     * Returns the convertible as formatted string.
     *
     * The first argument specifies the _string's format_ (see example), the second one _additional format options_.
     *
     * Currently there is only the format option `length`. Setting this to `"long"` will result in a long unit symbol
     *  (e.g. "meter" or "meters"), `"short"` will result in a short unit symbol (e.g. "m").
     *
     * @example
     * ```
     * const convertible = units.Convertible(12.2323123, "kt");
     *
     * console.log(convertible.format("%.2f %s", { length: "long" }));
     * // Output: 12.23 knots
     * ```
     *
     * @param format the string's format
     * @param formatOptions additional format options
     * @returns the convertible as formatted string
     */
    format(format: string, formatOptions?: FormatOptions): string;
    /**
     * Creates a copy of the convertible.
     * @returns a copy of the convertible
     */
    copy(): Convertible;
    /**
     * Compares this convertible semantically to another. Returns `-1`, `0`,
     * or `1` as this convertible is less than, equal to, or greater
     * than the passed convertible.
     * @param other the convertible to be compared
     * @returns `-1`, `0`, or `1` as this convertible is less than, equal to, or greater
     * than the passed convertible
     */
    compare(other: Convertible): 0 | 1 | -1;
    /**
     * Returns whether this convertible is semantically equal to the passed convertible.
     * @param other the convertible to be compared
     * @returns whether this convertible is semantically equal to the passed convertible
     */
    eq(other: Convertible): boolean;
    /**
     * Returns whether this convertible is semantically less than the passed convertible.
     * @param other the convertible to be compared
     * @returns whether this convertible is semantically less than the passed convertible
     */
    lt(other: Convertible): boolean;
    /**
     * Returns whether this convertible is semantically less than or equal to the passed convertible.
     * @param other the convertible to be compared
     * @returns whether this convertible is semantically less than or equal to the passed convertible
     */
    lte(other: Convertible): boolean;
    /**
     * Returns whether this convertible is semantically greater than the passed convertible.
     * @param other the convertible to be compared
     * @returns whether this convertible is semantically greater than the passed convertible
     */
    gt(other: Convertible): boolean;
    /**
     * Returns whether this convertible is semantically greater than or equal to the passed convertible.
     * @param other the convertible to be compared
     * @returns whether this convertible is semantically greater than or equal to the passed convertible
     */
    gte(other: Convertible): boolean;
}
//# sourceMappingURL=Convertible.d.ts.map