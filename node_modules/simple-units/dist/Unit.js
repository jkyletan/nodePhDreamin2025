import { inspect } from "util";
import IllegalArgumentsError from "./errors/IllegalArgumentsError.js";
/**
 * Represents a standard measure that is used to express amounts.
 *
 * A unit is always part of one single {@link Group} (attribute: {@link Unit.group}).
 * It is always defined in relation to the base unit of its group.
 *
 * The exact relation is defined in the converter functions {@link Unit.fromBase} and {@link Unit.toBase}.
 * Thereby `fromBase(val: number) => number` defines the conversion from the base unit to `this` and `toBase(val: number) => number` vice versa.
 * As a result of this simple concept, all units of a group are convertible into each other.
 *
 * The 4th important property of each unit is its {@link Unit.format}.
 * This defines the unit's shape. It allows firstly the parser to recognize the unit in a string and
 * secondly it provides the basis for the `.format()` method of the {@link Convertible}.
 *
 * Lastly every unit is part of a unit system (attribute: {@link Unit.system}).
 * This meta information is used for the {@link Convertible}'s `.asBest()` method.
 * By default, the Convertible always remains in the same system of units.
 */
export default class Unit {
    /**
     * The unit's {@link Group}. Units belonging to the same group are convertible into each other.
     */
    get group() {
        return this._internal._group;
    }
    /**
     * See overloads above.
     * @hidden
     * @param format
     * @param var1
     * @param var2
     * @param system
     */
    constructor(format, var1, var2, system) {
        /**
         * @hidden
         */
        this._internal = {
            _group: null,
        };
        this.format = format;
        this.system = system;
        if (typeof var1 === "function" && typeof var2 === "function") {
            this.toBase = var1;
            this.fromBase = var2;
        }
        else if (typeof var1 === "number" && typeof var2 === "number") {
            this.toBase = (val) => {
                return val * var1 + var2;
            };
            this.fromBase = (val) => {
                return (val - var2) / var1;
            };
        }
        else {
            throw new IllegalArgumentsError(`Failed to create unit '${format.short[0]}'. Illegal arguments were passed. Read the documentation for more details.`);
        }
    }
    /**
     * Returns the unit's standard string representation - therefore the most common symbol. For example `'m'` is returned for the unit meter.
     * @returns the unit's standard string representation
     */
    toString() {
        return this.format.short[0];
    }
    /**
     * @hidden
     */
    [inspect.custom](depth, options) {
        return options.stylize(this.toString(), "special");
    }
    /**
     * Returns an array of units to which this unit can be converted.
     * @returns an array of units to which this unit can be converted
     */
    possibilities() {
        return this.group.possibilities();
    }
    /**
     * Creates a string array holding all this unit's different notations.
     * @returns a string array holding all this unit's different notations
     */
    computeNotations() {
        return this.format.short.concat(this.format.long.pl, this.format.long.sg);
    }
}
//# sourceMappingURL=Unit.js.map