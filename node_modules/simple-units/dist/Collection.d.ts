import { inspect } from "util";
import CollectionEditor from "./CollectionEditor.js";
import Convertible from "./Convertible.js";
import Group from "./Group.js";
import Unit from "./Unit.js";
/**
 * Represents a collection of units (see {@link Unit}) structured in groups (see {@link Group}).
 *
 * Offers key functionality like converting from one unit to another.
 * Is the center at which all of the library's features are brought together.
 *
 * The basic structure of any collection is basically following: A collection is the parent of
 * multiple groups. Groups are parents of multiple units.
 *
 * <b>Example</b>:
 * ```
 * Collection
 *  |
 *  |____Group "length"
 *  |      |___Unit "meter"
 *  |      |___Unit "inch"
 *  |      |___ (...)
 *  |____Group "mass"
 *  |      |___Unit "kilogram"
 *  |      |___Unit "pound"
 *  |      |___ (...)
 *  |____Group "custom"
 *  |      |___Unit "small coins"
 *  |      |___Unit "big coins"
 *
 * ```
 *
 * Collections are not static. In fact they are very flexible. You can add, overwrite and remove unit groups using the {@link Collection.Editor}.
 * Added to that groups are editable in the same way (see {@link Group.Editor}),
 * which leads to the fact that groups can be modified in their entirety at runtime.
 */
export default class Collection {
    /**
     * @hidden
     */
    static readonly None: Collection;
    /**
     * All units of the collection arranged in a map. This map is used to improve performance.
     * @hidden
     */
    private readonly units;
    /**
     * All groups of the collection arranged in a map.
     */
    private readonly _groups;
    /**
     * These methods are only used internally.
     * @hidden
     */
    readonly _internal: {
        /**
         * Adds a string-unit-association to the {@link units} map.
         * @param name the unit's string representation
         * @param unit the unit
         */
        _setUnit: (name: string, unit: Unit) => void;
        /**
         * Removes a string-unit-association from the {@link units} map.
         * @param name the unit's string representation
         */
        _deleteUnit: (name: string) => void;
        /**
         * Returns the collection's groups.
         * @returns
         */
        _groups: () => Map<string, Group>;
        _units: () => Map<string, Unit>;
    };
    /**
     * The collection's editor. Provides methods to add, remove and overwrite unit groups.
     *
     * @see CollectionEditor
     */
    readonly Editor: CollectionEditor;
    /**
     * Creates a new collection.
     */
    constructor();
    /**
     * Returns a string array containing the names of all groups.
     * @returns a string array containing the names of all groups
     */
    groups(): string[];
    /**
     * Returns a string array containing the short names of all units.
     * @returns a string array containing the short names of all units
     */
    possibilities(): string[];
    /**
     * Returns whether the passed unit is supported.
     * @param unit the unit
     * @returns whether the passed unit is supported
     */
    isSupported(unit: string): boolean;
    /**
     * Returns the unit object belonging to the given unit.
     * @param unit the unit as string
     * @returns the unit object belonging to the given unit string
     * @see Unit
     */
    unit(unit: string): Unit;
    /**
     * Returns the group having the passed name.
     * @param group the group's name
     * @returns the group itself
     * @see Group
     */
    group(group: string): Group;
    /**
     * Returns a convertible having the given value and unit. Does exactly the same as {@link Collection.Convertible}.
     * @param value the convertible's value (e.g. `20`)
     * @param unit the convertible's unit (e.g. `°F`)
     * @returns a convertible having the given value and unit
     * @see Convertible
     */
    from(value: number, unit: string): Convertible;
    /**
     * Returns a convertible having the given value and unit. Alias to {@link Collection.from}.
     * @param value the convertible's value (e.g. `20`)
     * @param unit the convertible's unit (e.g. `°F`)
     * @returns a convertible having the given value and unit
     * @see Convertible
     */
    Convertible(value: number, unit: string): Convertible;
    /**
     * Returns the collection as human-readable string.
     * @returns the collection as string
     */
    toString(): string;
    /**
     * @hidden
     */
    [inspect.custom](depth: any, options: any): string;
}
//# sourceMappingURL=Collection.d.ts.map